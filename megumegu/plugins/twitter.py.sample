# -*- coding: utf-8 -*-

from __future__ import print_function

from . import BasePlugin

import logging
import re
import os
import tempfile

import requests
import tweepy

from ..settings import settings

def trim_twtr_status(title, url, text, more=[]):
    if more:
        msg = text
    else:
        text = ''.join(['\n', text]) if text else text
        msg = '\n'.join([title, url, text]) if text else '\n'.join([title, url])
    # @see https://github.com/django/django/blob/master/django/core/validators.py#L69
    regex = re.compile(
        r'(?:[a-z0-9\.\-]*)://'  # scheme is validated separately
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  # ...or ipv4
        r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  # ...or ipv6
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)', re.IGNORECASE)
    subs = regex.sub('', msg)
    urls = regex.findall(msg)
    lens = (len(subs) + (len(urls) * settings.getint('TWITTER_URL_LEN')))
    if lens <= settings.getint('TWITTER_CHAR_LIMIT'):
        more.append(msg)
        return more
    else:
        if text:
            tmp = text[:(lens + 4 - settings.getint('TWITTER_CHAR_LIMIT')) * -1]
            if more:
                more.append(tmp + u'（続く）')
            else:
                more.append('\n'.join([title, url, tmp]) + u'（続く）')
            return trim_twtr_status(title, url, u'（続き）' + text[len(tmp):], more)
        else:
            return more.append('\n'.join([title[:(lens + 1 - settings.getint('TWITTER_CHAR_LIMIT')) * -1], url]) + u'…')

def make_dir(path):
    if not (os.path.exists(path)):
        try:
            os.makedirs(path)
        except:
            logging.warning(path)
            return False
    return True

def save_media(media_urls, tmp_path='/tmp/'):
    saved_list = []
    if not isinstance(media_urls, list):
        media_urls = [media_urls]
    if make_dir(tmp_path):
        for media_url in media_urls:
            suffix = os.path.splitext(media_url)[1]
            if not suffix:
                suffix = '.jpg'
            try:
                res = requests.get(media_url, stream=True)
                with tempfile.NamedTemporaryFile(prefix=tmp_path, suffix=suffix, delete=False) as temp:
                    temp.write(res.content)
                    temp.flush()
                    saved_list.append(temp.name)
            except:
                raise
    return saved_list

class Plugin(BasePlugin):

    @classmethod
    def push(cls, **kwargs):
        status = trim_twtr_status(kwargs.get('name'), kwargs.get('url'), '\n'.join([kwargs.get('title'), kwargs.get('content') if kwargs.get('content') else '']), [])
        medias = save_media(kwargs.get('media_urls'), settings.get('TMP_PATH'))

        auth = tweepy.OAuthHandler(settings.get('CONSUMER_KEY'), settings.get('CONSUMER_SECRET'))
        auth.set_access_token(settings.get('ACCESS_KEY'), settings.get('ACCESS_SECRET'))
        api = tweepy.API(auth)

        try:
            if medias:
                media_ids = []
                for m in medias:
                    media_ids.append(api.media_upload(filename=m).media_id)
                    if len(media_ids) >= settings.getint('TWITTER_IMG_MAX'):
                        break
            else:
                media_ids = None

            if status:
                in_reply_to_status_id = None
                for t in status:
                    stat = api.update_status(status=t.encode('utf8'), in_reply_to_status_id=in_reply_to_status_id, media_ids=media_ids)
                    in_reply_to_status_id = stat.id
                    media_ids = None

        except Exception as e:
            logging.exception(e)
